/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package konnik.json

import kotlin.test.Test
import kotlin.test.assertEquals


class ParserKtTest {
    @Test
    fun `true`() {
        val result = json.runParser("true")
        assertEquals(JsonValue.Bool(true), result)
    }

    @Test
    fun `false`() {
        val result = json.runParser("false")
        assertEquals(JsonValue.Bool(false), result)
    }

    @Test
    fun `null`() {
        val result = json.runParser("null")
        assertEquals(JsonValue.Null, result)
    }

    @Test
    fun `numbers - valid ones`() {
        assertEquals(JsonValue.Num(3.14), json.runParser("3.14"))
        assertEquals(JsonValue.Num(314.0), json.runParser("3.14E+2"))
        assertEquals(JsonValue.Num(314.0), json.runParser("3.14e+2"))
        assertEquals(JsonValue.Num(0.00314), json.runParser("3.14E-3"))
        assertEquals(JsonValue.Num(0.00314), json.runParser("3.14e-3"))
        assertEquals(JsonValue.Num(123.0), json.runParser("123"))
        assertEquals(JsonValue.Num(1.0), json.runParser("1"))
        assertEquals(JsonValue.Num(0.0), json.runParser("0"))
        assertEquals(JsonValue.Num(-0.0), json.runParser("-0"))
        assertEquals(JsonValue.Num(-0.123), json.runParser("-0.123"))
        assertEquals(JsonValue.Num(-1.0), json.runParser("-1"))
    }

    @Test
    fun `numbers - invalid ones`() {
        assertEquals(null, json.runParser("0123")) // cant start with 0
        assertEquals(null, json.runParser(".123")) // must have number before decimal point
        assertEquals(null, json.runParser("+12")) // positive numbers does not use prefix +
    }

    @Test
    fun `strings - valid ones`() {
        assertEquals(JsonValue.Str("hello"), json.runParser(""""hello""""))
        assertEquals(JsonValue.Str("hello\n"), json.runParser(""""hello\n""""))
        assertEquals(JsonValue.Str("hello\t"), json.runParser(""""hello\t""""))
        assertEquals(JsonValue.Str("hello\b"), json.runParser(""""hello\b""""))
        assertEquals(JsonValue.Str("hello\r"), json.runParser(""""hello\r""""))
        assertEquals(JsonValue.Str("back\\slash"), json.runParser(""""back\\slash""""))
        assertEquals(JsonValue.Str("forward/slash"), json.runParser(""""forward\/slash""""))
        assertEquals(JsonValue.Str("a \"quoted\" word"), json.runParser(""""a \"quoted\" word""""))
        assertEquals(JsonValue.Str(""), json.runParser(""""""""))
        assertEquals(JsonValue.Str("Unicode char: Â©"), json.runParser(""""Unicode char: \u00A9""""))
    }

    @Test
    fun `strings - invalid`() {
        assertEquals(null, json.runParser(""""string with unescaped " quote""""))
    }

    @Test
    fun `empty array`() {
        val result = json.runParser("[]")
        assertEquals(JsonValue.Array(emptyList()), result)
    }

    @Test
    fun `array with values`() {
        val result = json.runParser(
            """
            [true,false,["string with comma,",42]]
            """
        )
        assertEquals(
            JsonValue.Array(
                listOf(
                    JsonValue.Bool(true),
                    JsonValue.Bool(false),
                    JsonValue.Array(
                        listOf(
                            JsonValue.Str("string with comma,"),
                            JsonValue.Num(42.0)
                        )
                    )
                )
            ),
            result
        )
    }

    @Test
    fun `empty object`() {
        val result = json.runParser("{}")
        assertEquals(JsonValue.Object(emptyMap()), result)
    }

    @Test
    fun `object with members`() {
        val jsonObj = """
            { "a": true, "b":false, "c": null, "d" : [1,2,3], "e": 42, "f": {"x":true}
            }
        """.trimIndent()
        val result = json.runParser(jsonObj)
        val expected = JsonValue.Object(
            mapOf(
                "a" to JsonValue.Bool(true),
                "b" to JsonValue.Bool(false),
                "c" to JsonValue.Null,
                "d" to JsonValue.Array(listOf(JsonValue.Num(1.0), JsonValue.Num(2.0), JsonValue.Num(3.0))),
                "e" to JsonValue.Num(42.0),
                "f" to JsonValue.Object(
                    mapOf(
                        "x" to JsonValue.Bool(true)
                    )
                )
            )

        )

        assertEquals(expected, result)
    }

    @Test
    fun `all characters must be consumed`() {
        assertEquals(null, json.runParser("true crap"))
        assertEquals(null, json.runParser("falsetrue"))
        assertEquals(null, json.runParser("nullfalse"))
        assertEquals(null, json.runParser("42.2false"))
    }


}
